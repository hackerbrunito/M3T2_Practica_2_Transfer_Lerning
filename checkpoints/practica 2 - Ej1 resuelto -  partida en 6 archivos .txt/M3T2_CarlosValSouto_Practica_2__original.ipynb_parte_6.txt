",
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_comparative(epochs, train_acc, val_acc, title=\"Training vs Validation Accuracy\"):\n",
        "    plt.figure(figsize=(8, 5))\n",
        "    \n",
        "    # Plotear ambas curvas\n",
        "    plt.plot(epochs, train_acc, 'b-o', label='Training Accuracy', linewidth=1, markersize=4)\n",
        "    plt.plot(epochs, val_acc, 'm-o', label='Validation Accuracy', linewidth=1, markersize=4)\n",
        "    \n",
        "    # Configuración del gráfico\n",
        "    plt.title(title, fontsize=10, fontweight='bold')\n",
        "    plt.xlabel('Epochs', fontsize=12)\n",
        "    plt.ylabel('Accuracy (%)', fontsize=12)\n",
        "    plt.legend(fontsize=9)\n",
        "    plt.grid(True, alpha=0.4)\n",
        "    plt.ylim(30, 100)  # Rango (y) apropiado para nuestros datos\n",
        "        \n",
        "    # plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Ejecutar visualización\n",
        "plot_comparative(epochs_list, train_accuracies, validation_accuracies, \n",
        "                \"Overfitting Analysis: Training vs Validation Accuracy\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f9dccbdd",
      "metadata": {},
      "source": [
        "## Comentario\n",
        "\n",
        "Como ya comenté anteriormente, reinicié muy alegremetne el kernel después de haber terminado todas las ejecuciones y haber escrito todos comentarios con las tablas, etc. Todavía me estoy arripin tiendo, jaja 😂. Bueno, tuve que hacer algunos cambios mínimos en mis comentarios y añadir alguna cosilla más. Espero que esté todo correcto y cuando corrijas esperes encontrar la lógica esperada."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "df3db57d",
      "metadata": {
        "id": "df3db57d"
      },
      "source": [
        "## Ej 2. Problema de clasificación end-to-end (5 pts)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d3759a3a",
      "metadata": {
        "id": "d3759a3a"
      },
      "source": [
        "En esta última semana se va a poner en práctica todos los conocimientos adquiridos a lo largo de este módulo: deberás desarrollar un modelo neuronal para la clasificación de imágenes de frutas que ofrezca el mayor *accuracy* posible. No hay más indicaciones o limitaciones que las siguientes:\n",
        "- El dataset a utilizar será el siguiente: [https://www.kaggle.com/datasets/sshikamaru/fruit-recognition/data](https://www.kaggle.com/datasets/sshikamaru/fruit-recognition/data).\n",
        "- Has de reutilizar un modelo neuronal utilizando PyTorch, tú decides el grado de reutilización. Ideas:\n",
        "  - Modelos de PyTorch Hub. [https://pytorch.org/hub/](https://pytorch.org/hub/)\n",
        "  - Modelos de Torchvision. [https://pytorch.org/vision/0.13/models.html](https://pytorch.org/vision/0.13/models.html)\n",
        "\n",
        "Trata de explicar todos los pasos seguidos y las decisiones de diseño. Recuerda, a modo de guía, los pasos habituales:\n",
        "\n",
        "1. Adquisición de datos y carga en **Datasets**. Recomiendo aqui hacer un **EDA** para conocer bien la naturaleza del dataset.\n",
        "2. Creación de **DataLoaders**.\n",
        "3. Adaptación del modelo pre-entrenado.\n",
        "4. Definición de optimizador y función de coste apropiadas.\n",
        "5. Entrenamiento y validación.\n",
        "6. Análisis de métricas en test (las visualizaciones son bienvenidas)\n",
        "\n",
        "¡A por ello!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "id": "723bc64b",
      "metadata": {
        "id": "723bc64b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Dispositivo disponible: cuda\n"
          ]
        }
      ],
      "source": [
        "# Importar librerías básicas\n",
        "import torch\n",
        "import torchvision\n",
        "from torchvision import datasets, transforms\n",
        "import os\n",
        "\n",
        "# Verificar si tenemos GPU disponible\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(f\"Dispositivo disponible: {device}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "id": "c9f60203",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Downloading from https://www.kaggle.com/api/v1/datasets/download/sshikamaru/fruit-recognition?dataset_version_number=2...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "100%|██████████| 102M/102M [00:03<00:00, 30.2MB/s] "
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracting files...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Dataset descargado en: C:\\Users\\Carlos\\.cache\\kagglehub\\datasets\\sshikamaru\\fruit-recognition\\versions\\2\n"
          ]
        }
      ],
      "source": [
        "# Descargar dataset de frutas\n",
        "import kagglehub\n",
        "\n",
        "# Descargar el dataset\n",
        "path = kagglehub.dataset_download(\"sshikamaru/fruit-recognition\")\n",
        "print(f\"Dataset descargado en: {path}\")"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [
        "102a4ceb",
        "owTz2_yBfoxA",
        "H2Z44bB4ksDp",
        "e1280bba",
        "2af82f39",
        "e89b5d71",
        "df3db57d"
      ],
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": ".venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
