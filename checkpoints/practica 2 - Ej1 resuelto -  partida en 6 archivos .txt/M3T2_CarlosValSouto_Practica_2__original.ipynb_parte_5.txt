,
            "-------------------------------\n",
            "\n",
            "\n",
            "-------------------------------\n",
            "  ==> Epoch - 2\n",
            "-------------------------------\n",
            "\n",
            "Train Metrics: \n",
            " Accuracy: 75.6%, Avg train loss: 0.823094\n",
            "\n",
            "Val or Test Metrics: \n",
            " Accuracy: 50.0%, Avg loss: 1.243219 \n",
            "\n",
            "Checkpoint guardado en: checkpoint_recovered_epoch_2.pth\n",
            "\n",
            "-------------------------------\n",
            "\n",
            "\n",
            "-------------------------------\n",
            "  ==> Epoch - 3\n",
            "-------------------------------\n",
            "\n",
            "Train Metrics: \n",
            " Accuracy: 75.0%, Avg train loss: 0.818892\n",
            "\n",
            "Val or Test Metrics: \n",
            " Accuracy: 50.0%, Avg loss: 1.241706 \n",
            "\n",
            "Checkpoint guardado en: checkpoint_recovered_epoch_3.pth\n",
            "\n",
            "-------------------------------\n",
            "\n",
            "\n",
            "-------------------------------\n",
            "  ==> Epoch - 4\n",
            "-------------------------------\n",
            "\n",
            "Train Metrics: \n",
            " Accuracy: 76.2%, Avg train loss: 0.792835\n",
            "\n",
            "Val or Test Metrics: \n",
            " Accuracy: 50.0%, Avg loss: 1.242798 \n",
            "\n",
            "Checkpoint guardado en: checkpoint_recovered_epoch_4.pth\n",
            "\n",
            "-------------------------------\n",
            "\n"
          ]
        }
      ],
      "source": [
        "epochs = 4\n",
        "for t in range(epochs):\n",
        "    print(f\"\\n-------------------------------\\n  ==> Epoch - {t+1}\\n-------------------------------\\n\")\n",
        "    \n",
        "        # Entrenar\n",
        "    training(train_dataloader, model_recovered, loss_fn, optimizer_recovered)\n",
        "    \n",
        "    # Validar\n",
        "    test_and_validation(validation_dataloader, model_recovered, loss_fn)\n",
        "    \n",
        "    # Guardar checkpoint con nomenclatura diferente\n",
        "    save_checkpoint(f\"checkpoint_recovered_epoch_{t+1}.pth\", model_recovered, optimizer_recovered)\n",
        "    \n",
        "    print(f\"\\n-------------------------------\\n\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "FwmEV1P3fiQw",
      "metadata": {
        "id": "FwmEV1P3fiQw"
      },
      "source": [
        "**Responde a las siguientes preguntas:**\n",
        "1. ¿Mejora este modelo una clasificación al azar?\n",
        "\n",
        "2. ¿Sufre el modelo de Overfitting o Underfitting?\n",
        "\n",
        "3. ¿Crees que podría seguir mejorando sus métricas? ¿Cómo?\n",
        "\n",
        "Puedes hacer uso (optativo) de la funcion `plot_comparative` de la Practica 1 para visualizar el `accuracy` con respecto a las epochs de entrenamiento. Para ello deberas guardar en una lista el `accuracy` durante el entrenamiento.  "
      ]
    },
    {
      "cell_type": "markdown",
      "id": "_PP1-BHyfnfA",
      "metadata": {
        "id": "_PP1-BHyfnfA"
      },
      "source": [
        "### Respuesta\n",
        "\n",
        "\n",
        "<table>\n",
        "<tr>\n",
        "\n",
        "<td width=\"100%\" style=\"padding: 20px; vertical-align: top;\">\n",
        "\n",
        "1. No hay mejoría significativa, la mejora es mínima. \n",
        "\n",
        "2. El modelo sufre de OverFitting severo. El gap entre el `Train` y el `Val` sigue siendo muy grande, más del 30%. \n",
        "El cambio del `Loss` es también marginal. El `Val Accuracy` no mejora. El modelo ha memorizado el dataset y no generaliza.\n",
        "\n",
        "3. Con el enfoque actual, entrenando el modelo más epocas incrementaría el `OverFitting`.\n",
        "\n",
        "</td>\n",
        "</tr>\n",
        "<tr>\n",
        "\n",
        "<td width=\"100%\" style=\"padding: 20px; vertical-align: top;\">\n",
        "\n",
        " Después de esta segunda fase de entrenamiento -> en realidad el checkpoint sería como aplicar una pausa   \n",
        " y esta segunda fase de la casilla anterior, sería simplemente como quitarle el pausado. Se trata del mismo\n",
        " entrenamiento y sigue teniendo los mismos síntomas.\n",
        "\n",
        "</td>\n",
        "\n",
        "</tr>\n",
        "</table>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "id": "571fe3f0",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Datos del entrenamiento:\n",
            "Épocas: [1, 2, 3, 4, 5, 6, 7, 8]\n",
            "Train Accuracy: [79.5, 81.8, 82.4, 83.6, 82.2, 83.0, 82.4, 83.4]\n",
            "Validation Accuracy: [52.8, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0]\n"
          ]
        }
      ],
      "source": [
        "# Datos extraídos de los outputs del entrenamiento (8 épocas totales)\n",
        "train_accuracies = [79.5, 81.8, 82.4, 83.6, 82.2, 83.0, 82.4, 83.4]\n",
        "validation_accuracies = [52.8, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0]\n",
        "epochs_list = list(range(1, 9))  # Épocas 1-8\n",
        "\n",
        "print(\"Datos del entrenamiento:\")\n",
        "print(f\"Épocas: {epochs_list}\")\n",
        "print(f\"Train Accuracy: {train_accuracies}\")\n",
        "print(f\"Validation Accuracy: {validation_accuracies}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "id": "295d477e",
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "